# Transformation

```{r}
#| include=FALSE

library(RColorBrewer)
library(knitr)
library(tidyverse)
library(imagic)
library(broman)
library(DT)
library(dygraphs)
library(xts)


#<----------------------------------------------------------------------
#Function - that makes a censored value numeric
#<----------------------------------------------------------------------

MakeCenNumeric <- function (CenValue) { 
  
  CenValue <- stringr::str_replace(CenValue, "[^0-9.-]", "") 
  Parameter <- as.numeric(CenValue) 
  
  return(Parameter) 
  
}
#<-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|


```

In this Chapter we describe the `R-code` on how to transform data into a usable block; this block of data is a sub set of information from the database that can  be used to create: 

* summary statistics
* tables of information
* Time series graphs etc..

_this is part of the __Transform__ process decribed in Figure \@ref(fig:nice-fig2)_

The sub set of information (the block of data) is created by:  

* filtering the database for a single determinand or sample location   
* selecting data between a date range   


## Filtering Data Example {#filter_det}


The water quality database, `wtw_data` in the `imagic` package, contain measurements: 

* at various Water Treatment Works (WTW)   
* for a range of determinands  
* over periods of time


To create summary statistics and visualisation for individual (or groups of) determinands and select periods of time we _filter_ the `database`  so only the required  information is left.  

The _Dynamic Table_ below shows the `wtw_data` filtered for the `Conductivity` determinand at the `Rivendell WTW` water treatment works.

```{r}
# filter the wtw_data with the dplyr package and the filter function
riven_cond_data <- wtw_data %>% 
  filter(Description == "Rivendell WTW", Determinand == "Conductivity") 

DT::datatable(riven_cond_data, options = list(pageLength = 5), caption = 'Conductivity at Rivendell WTW')

```
In the filtered data `riven_cond_data` we can see that there are now `r add_commas(nrow(riven_cond_data))` observations from a total of `r add_commas(nrow(wtw_data))` in the original database `wtw_data`. All the `riven_cond_data` is shown in the dynamic Table below. 


## Visualise the Data as a Time Series  

A key aspect of _data science_ is visualisation, especially the initial visualisation. Figure \@ref(fig:nice-fig3a) below shows the `Conductivity` for `Rivendell WTW` as a times series plot; the graph is also interactive so it can be _zoomed_ to show specific time periods and the mouse can hover on individual values.

```{r}
#| label: fig-timecond
#| fig-cap: "Interactive Time Series Graph of the Conductivity for Rivendell WTW"

# Make the result column a vector of numbers (no censored values)
riven_cond_data$Result <- MakeCenNumeric(riven_cond_data$Result)

# Make two separate vectors of the date and result (arranged by the date)
date_column <- riven_cond_data %>% 
    select(Sample_Date, Result) %>% 
    arrange(Sample_Date) %>% 
    pull(Sample_Date)

result_column <- riven_cond_data %>% 
    select(Sample_Date, Result) %>% 
    arrange(Sample_Date) %>% 
    pull(Result) 

# Create a time-series object
cond_time_series <- xts(x=result_column, order.by=date_column)


dygraph(cond_time_series, ylab = "Conductivity (mS/m)") %>%
  dyRangeSelector() %>% 
  dyOptions(colors = RColorBrewer::brewer.pal(3, "Dark2")) %>% 
  dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE)

```




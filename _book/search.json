[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Magic",
    "section": "",
    "text": "This web book is an update to the WRC Research Project Number K5/2730//3. Since the this project was completed much has happened in Data Science…\nWhy South Africa needs Data Science\nWater Utilities are known for being data rich organisations. Water Utilities collect raw water and process (treatment) data, chemical dosage rate data and flow records, operational monitoring data, treatment plant data, compliance data for final water reservoirs and distribution systems, water quality at the final contact tank, distribution reservoirs, network and consumer complaint information. Many of the larger water utilities have online instrumentation such as Supervisory Control and Data Acquisition (SCADA) which collects information on flow and quality parameters which is used by the process control staff for operational purposes and quality assurance and control."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "The approach (methodology and practice) to data science has been changed dramatically in recent years with the continuing development of open source software"
  },
  {
    "objectID": "intro.html#install-r-rstudio-and-packages",
    "href": "intro.html#install-r-rstudio-and-packages",
    "title": "1  Introduction",
    "section": "1.1 Install R, RStudio and Packages",
    "text": "1.1 Install R, RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\n1.1.1 Install the imagic Package from GitHub\nThe imagic package contains example data (e.g. wtw_data) and functions that help with the Data Science of water treatment works monitoring results. To install this package use the code below in the console (see Figure ); one line at a time. The package is installed from GitHub.\n\n\nShow the code\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/imagic\")"
  },
  {
    "objectID": "intro.html#data-science",
    "href": "intro.html#data-science",
    "title": "1  Introduction",
    "section": "1.2 Data Science",
    "text": "1.2 Data Science\n\n\n\nFigure 1.1: Data Science Overview"
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "2  Example Data",
    "section": "",
    "text": "Show the code\nWwTW_hydro %>%\n    mutate(Popup_text = glue(\"{WWTP_NAME} - population served {add_commas(POP_SERVED)}\")) %>% \n    leaflet() %>% \n    addTiles() %>% \n    addCircleMarkers(\n      lng = ~LON_WWTP, lat = ~LAT_WWTP,\n      radius = 7,\n      #color = ~pal(Species),\n      stroke = TRUE, fillOpacity = 0.7,\n      popup = ~Popup_text, label = ~Popup_text\n    )\n\n\n\n\n\nFigure 2.1: Map of the WwTW_hydro Data\n\n\n\nFigure 2.1 shows the spacial extent of the WwTW_hydro data in the imagic package. The data has information on 964 Wastewater Treatment Works (WwTW); hovering on the map will pop up the names of the works and population served. The data is a subset of South Africa from the global wastewater treatment plant database used in the paper published in 20221\nOther information in the WwTW_hydro data:\n\nORG_ID ID from national/regional dataset (see reference paper for more information)\nWWTP_NAME Name of the WwTW from national/regional dataset (empty if not reported)\nCOUNTRY Country in which WwTW is located\nCNTRY_ISO Country ISO\nLAT_WWTP Latitude of reported WwTW location\nLON_WWTP Longitude of reported WwTW location\nQUAL_LOC Quality indicator related to reported WwTW location (see SI of reference paper for more information): 1 = high (tests indicated >80% of reported WwTW locations in country/region to be accurate); 2 = medium (tests indicated between 50% and 80% of reported WwTW locations in country/region to be accurate); 3 = low (tests indicated <50% of reported WwTW locations in country/region to be accurate); 4 = Quality of WwTW locations in country/region not analysed\nLAT_OUT Latitude of the estimated outfall location (see reference paper for more information)\nLON_OUT Longitude of the estimated outfall location (see reference paper for more information)\nSTATUS Status of the WwTW from national/regional dataset: Closed, Construction Completed, Decommissioned, Non-Operational, Operational, Projected, Proposed, Under Construction, Not Reported (assumed operational)\nPOP_SERVED Population served by the WwTW\nQUAL_POP Quality indicator related to the attribute “population served” (see reference paper for more information): 1 = Reported as ‘population served’ by national/regional dataset; 2 = Reported as ‘population equivalent’ by national/regional dataset; 3 = Estimated (with wastewater discharge available); 4 = Estimated (without wastewater discharge available)\nWASTE_DIS Treated wastewater discharged by the WwTW in m3 d-1\nQUAL_WASTE Quality indicator related to the attribute “Treated wastewater discharged” (see reference paper for more information): 1 = Reported as ‘treated’ by national/regional dataset; 2 = Reported as ‘design capacity’ by national/regional dataset; 3 = Reported but type not identified; 4 = Estimated\nLEVEL Level of treatment of the WwTW: Primary, Secondary, Advanced\nQUAL_LEVEL Quality indicator related to the attribute “level of treatment” (see reference paper for more information): 1 = Reported by national/regional dataset; 2 = Estimated\nDF Estimated dilution factor (empty if estimated outfall location is the ocean or large lake; see reference paper for more information)\nHYRIV_ID ID of associated river reach in RiverATLAS at estimated outfall location (link to HydroATLAS database; empty if estimated outfall location is the ocean or an endorheic sink)\nRIVER_DIS Estimated river discharge at the WwTW outfall location in m3 s-1 (derived from HydroATLAS database; empty if estimated outfall location is the ocean)\nCOAST_10KM 1 = Estimated outfall location within 10 km of the ocean or a large lake (surface area larger than 500 km2); 0 = Estimated outfall location further than 10 km of the ocean or a large lake (surface area larger than 500 km2)\nCOAST_50KM 1 = Estimated outfall location within 50 km of the ocean or a large lake (surface area larger than 500 km2); 0 = Estimated outfall location further than 50 km of the ocean or a large lake (surface area larger than 500 km2)\nDESIGN_CAP Design capacity of WwTW as reported in national/regional dataset (empty if not reported)\nQUAL_CAP Quality indicator related to the attribute “design capacity”: 1 = Reported as design capacity in m3 d-1; 2 = Reported as design capacity in ‘population equivalent’; 3 = Not reported"
  },
  {
    "objectID": "database.html#the-wtw_data-water-treament-quality-data",
    "href": "database.html#the-wtw_data-water-treament-quality-data",
    "title": "2  Example Data",
    "section": "2.2 The wtw_data Water Treament Quality Data",
    "text": "2.2 The wtw_data Water Treament Quality Data\nTable 2.1 shows the structure of the wtw_data in the imagic package. The data has 494,199 rows.\n\n\nShow the code\nwtw_data %>% \n  sample_n(10) %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) \n\n\n\n\n\n\nTable 2.1:  Data From wtw_data in the imagic Package \n  \n  \n    \n      Description\n      Sample_Date\n      Determinand\n      Result\n      Units\n      lessthan\n      greaterthan\n    \n  \n  \n    Bree\n2014-12-15\nTurbidity\n0.2\nntu\nFALSE\nFALSE\n    Minas Tirith\n2001-12-22\nColiforms\n0.0\nMPN/100mL\nFALSE\nFALSE\n    Edoras\n2001-05-23\nColiforms\n0.0\nMPN/100mL\nFALSE\nFALSE\n    Isengard\n2016-10-12\nFree Chlorine\n1.1\nmg Cl2/L\nFALSE\nFALSE\n    Rivendell\n2005-07-08\nTotal Chlorine\n1.2\nmg Cl2/L\nFALSE\nFALSE\n    Hobbiton\n2016-06-18\nConductivity\n30.3\nmS/m\nFALSE\nFALSE\n    Hobbiton\n2008-10-12\nE.coli\n0.0\nMPN/100mL\nFALSE\nFALSE\n    Isengard\n2000-09-12\nColony Count 21\n0.0\nmL\nFALSE\nFALSE\n    Isengard\n2002-04-25\nColony Count 37\n0.0\nmL\nFALSE\nFALSE\n    Minas Tirith\n2001-03-01\nColony Count 21\n2.0\nmL\nFALSE\nFALSE\n  \n  \n  \n\n\n\n\n\n\n\nShow the code\nwtw_data %>% \n  mutate(Description = stringr::str_replace(Description, \" WTW\", \"\")) %>% \n  group_by(Description, Determinand) %>% \n  count() %>% \n  ungroup() %>% \n  mutate(n = add_commas(n)) %>% \n  pivot_wider(names_from = Description, values_from = n) %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n   cols_align(\n    align = \"right\",\n    columns = 2:10\n  )\n\n\n\n\n\n\nTable 2.2:  Water Treatment Works (WTW) and the Number of Determinands in wtw_data \n  \n  \n    \n      Determinand\n      Bree\n      Dale\n      Edoras\n      Grey Havens\n      Hobbiton\n      Isengard\n      Minas Tirith\n      Mirkwood\n      Rivendell\n    \n  \n  \n    Coliforms\n6,289\n1,857\n6,271\n6,078\n6,308\n3,281\n6,265\n4,471\n6,264\n    Colony Count 21\n1,340\n1,583\n1,325\n4,267\n4,487\n2,487\n4,439\n2,669\n4,441\n    Colony Count 37\n4,476\n1,614\n4,467\n4,282\n4,501\n2,506\n4,459\n2,689\n4,459\n    Colour\n1,355\n1,296\n1,344\n2,015\n6,308\n3,268\n2,125\n2,846\n6,262\n    Conductivity\n3,673\n1,841\n3,661\n3,473\n6,302\n3,280\n3,621\n4,503\n6,245\n    E.coli\n6,291\n1,865\n6,276\n6,085\n6,314\n3,283\n6,267\n4,481\n6,269\n    Free Chlorine\n6,299\n1,872\n6,278\n6,085\n6,320\n3,293\n6,280\n4,490\n6,273\n    Odour\n292\n783\n291\n5,112\n5,240\n2,216\n5,214\n2,184\n5,215\n    pH\n2,934\n818\n2,961\n5,115\n5,246\n2,223\n5,215\n3,456\n5,217\n    Taste\n291\n771\n290\n5,074\n5,164\n2,166\n5,180\n1,601\n5,192\n    Temperature\n3,645\n1,869\n3,550\n6,087\n6,324\n3,291\n6,279\n4,511\n6,005\n    Total Chlorine\n6,301\n1,870\n6,281\n6,087\n6,324\n3,292\n6,278\n4,492\n6,274\n    Turbidity\n7,142\n2,696\n7,112\n6,854\n7,157\n4,122\n7,118\n5,367\n7,096\n  \n  \n  \n\n\n\n\n\nShow the code\n  # gt_hulk_col_numeric(2:10, trim = TRUE) \n  #gt_color_rows(2:10, palette = \"ggsci::blue_material\")"
  },
  {
    "objectID": "transformation.html",
    "href": "transformation.html",
    "title": "3  Manipulating Data",
    "section": "",
    "text": "In this Chapter we describe, and show the code, on how to transform data into a usable selection; a sub-set of information from the database that can be used to create:\n_this is can be considered as part of transform shown in Figure 1.1.\nThe sub-set of information, the selection of data, is created by:"
  },
  {
    "objectID": "transformation.html#filtering-data",
    "href": "transformation.html#filtering-data",
    "title": "3  Manipulating Data",
    "section": "3.1 Filtering Data",
    "text": "3.1 Filtering Data\nThe water quality database, wtw_data in the imagic package, contain measurements:\n\nat various Water Treatment Works (WTW)\n\nfor a range of determinands\n\nover periods of time\n\nTo create summary statistics and visualisation for individual (or groups of) determinands and select periods of time we filter the database so only the required information is left.\nThe Dynamic Table below shows the wtw_data filtered for the Conductivity determinand at the Rivendell WTW water treatment works.\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nriven_cond_data <- wtw_data %>% \n  filter(Description == \"Rivendell\", Determinand == \"Conductivity\") \n\n# show the data with datatable function from the DT package\nDT::datatable(riven_cond_data, options = list(pageLength = 5), caption = 'Conductivity at Rivendell WTW')\n\n\n\n\n\n\n\nIn the filtered data riven_cond_data we can see that there are now 6,245 observations from a total of 494,199 in the original database wtw_data. All the riven_cond_data is shown in the dynamic Table below."
  },
  {
    "objectID": "transformation.html#summary-statistics",
    "href": "transformation.html#summary-statistics",
    "title": "3  Manipulating Data",
    "section": "3.2 Summary Statistics",
    "text": "3.2 Summary Statistics\nThe list of data in the Table above is not very informative (if only because it is difficult to see all the data at one time); to gain a better understanding of the Conductivity data, summary statistics can be produced. The code below uses the mosaic package to calculate some favourite stats using the function favstats; the summary statistics for the Conductivity for Rivendell WTW is shown in Table 4.1.\n\n\nShow the code\n# The summary statistics are saved into a variable riven_cond_stats \nriven_cond_stats <- favstats(~Result, data = riven_cond_data)\n\n# riven_cond_stats is made into a the table (using the code below)\nriven_cond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 3.1:  Summary Statistcs for Conductivity at Rivendell WTW \n  \n  \n    \n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    1.44\n11.45\n13.64\n16.03\n41\n14.08085\n3.262842\n6245\n0\n  \n  \n  \n\n\n\n\n\nSummary statistics for the Conductivity for all WTW is shown in Table 4.2 and to make the table easier to read, the median column is highlighted with a graduated colour scale.\n\n\nShow the code\ncond_data <- wtw_data %>% \n  filter(Determinand == \"Conductivity\") %>% \n  mutate(Description = factor(Description))\n\n# The summary statistics are saved into a variable riven_cond_stats \ncond_stats <- favstats(Result~Description, data = cond_data)\n\n# riven_cond_stats is made into a the table (using the code below)\ncond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  gt_color_rows(median, palette = \"ggsci::blue_material\")\n\n\n\n\n\n\nTable 3.2:  Summary Statistcs for Conductivity at All WTW \n  \n  \n    \n      Description\n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    Bree\n3.25\n11.10\n13.320\n16.01\n25.40\n14.000732\n3.5863104\n3673\n0\n    Dale\n7.37\n8.24\n8.690\n9.25\n13.66\n8.790750\n0.7707545\n1841\n0\n    Edoras\n7.07\n11.10\n13.400\n16.01\n25.20\n14.015570\n3.5603827\n3661\n0\n    Grey Havens\n5.21\n8.70\n9.220\n9.74\n69.40\n9.294984\n1.4965695\n3473\n0\n    Hobbiton\n10.70\n23.20\n26.400\n28.20\n43.50\n25.809248\n3.5020694\n6302\n0\n    Isengard\n2.18\n14.10\n17.715\n23.80\n37.90\n19.019860\n5.5724220\n3280\n0\n    Minas Tirith\n1.06\n8.62\n9.070\n9.50\n13.78\n9.061972\n0.7255843\n3621\n0\n    Mirkwood\n1.86\n17.53\n18.640\n19.63\n31.10\n18.756123\n1.8575681\n4503\n0\n    Rivendell\n1.44\n11.45\n13.640\n16.03\n41.00\n14.080845\n3.2628418\n6245\n0"
  },
  {
    "objectID": "transformation.html#data-time-series",
    "href": "transformation.html#data-time-series",
    "title": "3  Manipulating Data",
    "section": "3.3 Data Time Series",
    "text": "3.3 Data Time Series\nA key aspect of data science is visualisation, especially the initial visualisation. Figure 4.1 shows the Conductivity for Rivendell WTW as a times series plot; the graph is also interactive so it can be zoomed to show specific time periods and the mouse can hover on individual points to reveal the date and value.\n\n\nShow the code\n# Make two separate vectors of the date and result (arranged by the date)\ndate_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Sample_Date)\n\nresult_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Result) \n\n# Create a time-series object\ncond_time_series <- xts(x=result_column, order.by=date_column)\n\n\ndygraph(cond_time_series, ylab = \"Conductivity (mS/m)\") %>%\n  dyRangeSelector() %>% \n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Dark2\")) %>% \n  dyHighlight(highlightCircleSize = 5, \n              highlightSeriesBackgroundAlpha = 0.2,\n              hideOnMouseOut = FALSE)\n\n\n\n\n\nFigure 3.1: Interactive Time Series Graph of the Conductivity for Rivendell WTW"
  },
  {
    "objectID": "aggregation.html",
    "href": "aggregation.html",
    "title": "4  Aggregating Data",
    "section": "",
    "text": "In this Chapter we describe, and show the code, on how to transform data into a usable selection; a sub-set of information from the database that can be used to create:\n_this is can be considered as part of transform shown in Figure 1.1.\nThe sub-set of information, the selection of data, is created by:"
  },
  {
    "objectID": "aggregation.html#filtering-data",
    "href": "aggregation.html#filtering-data",
    "title": "4  Aggregating Data",
    "section": "4.1 Filtering Data",
    "text": "4.1 Filtering Data\nThe water quality database, wtw_data in the imagic package, contain measurements:\n\nat various Water Treatment Works (WTW)\n\nfor a range of determinands\n\nover periods of time\n\nTo create summary statistics and visualisation for individual (or groups of) determinands and select periods of time we filter the database so only the required information is left.\nThe Dynamic Table below shows the wtw_data filtered for the Conductivity determinand at the Rivendell WTW water treatment works.\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nriven_cond_data <- wtw_data %>% \n  filter(Description == \"Rivendell\", Determinand == \"Conductivity\") \n\n# show the data with datatable function from the DT package\nDT::datatable(riven_cond_data, options = list(pageLength = 5), caption = 'Conductivity at Rivendell WTW')\n\n\n\n\n\n\n\nIn the filtered data riven_cond_data we can see that there are now 6,245 observations from a total of 494,199 in the original database wtw_data. All the riven_cond_data is shown in the dynamic Table below."
  },
  {
    "objectID": "aggregation.html#summary-statistics",
    "href": "aggregation.html#summary-statistics",
    "title": "4  Aggregating Data",
    "section": "4.2 Summary Statistics",
    "text": "4.2 Summary Statistics\nThe list of data in the Table above is not very informative (if only because it is difficult to see all the data at one time); to gain a better understanding of the Conductivity data, summary statistics can be produced. The code below uses the mosaic package to calculate some favourite stats using the function favstats; the summary statistics for the Conductivity for Rivendell WTW is shown in Table 4.1.\n\n\nShow the code\n# The summary statistics are saved into a variable riven_cond_stats \nriven_cond_stats <- favstats(~Result, data = riven_cond_data)\n\n# riven_cond_stats is made into a the table (using the code below)\nriven_cond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 4.1:  Summary Statistcs for Conductivity at Rivendell WTW \n  \n  \n    \n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    1.44\n11.45\n13.64\n16.03\n41\n14.08085\n3.262842\n6245\n0\n  \n  \n  \n\n\n\n\n\nSummary statistics for the Conductivity for all WTW is shown in Table 4.2 and to make the table easier to read, the median column is highlighted with a graduated colour scale.\n\n\nShow the code\ncond_data <- wtw_data %>% \n  filter(Determinand == \"Conductivity\") %>% \n  mutate(Description = factor(Description))\n\n# The summary statistics are saved into a variable riven_cond_stats \ncond_stats <- favstats(Result~Description, data = cond_data)\n\n# riven_cond_stats is made into a the table (using the code below)\ncond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  gt_color_rows(median, palette = \"ggsci::blue_material\")\n\n\n\n\n\n\nTable 4.2:  Summary Statistcs for Conductivity at All WTW \n  \n  \n    \n      Description\n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    Bree\n3.25\n11.10\n13.320\n16.01\n25.40\n14.000732\n3.5863104\n3673\n0\n    Dale\n7.37\n8.24\n8.690\n9.25\n13.66\n8.790750\n0.7707545\n1841\n0\n    Edoras\n7.07\n11.10\n13.400\n16.01\n25.20\n14.015570\n3.5603827\n3661\n0\n    Grey Havens\n5.21\n8.70\n9.220\n9.74\n69.40\n9.294984\n1.4965695\n3473\n0\n    Hobbiton\n10.70\n23.20\n26.400\n28.20\n43.50\n25.809248\n3.5020694\n6302\n0\n    Isengard\n2.18\n14.10\n17.715\n23.80\n37.90\n19.019860\n5.5724220\n3280\n0\n    Minas Tirith\n1.06\n8.62\n9.070\n9.50\n13.78\n9.061972\n0.7255843\n3621\n0\n    Mirkwood\n1.86\n17.53\n18.640\n19.63\n31.10\n18.756123\n1.8575681\n4503\n0\n    Rivendell\n1.44\n11.45\n13.640\n16.03\n41.00\n14.080845\n3.2628418\n6245\n0"
  },
  {
    "objectID": "aggregation.html#data-time-series",
    "href": "aggregation.html#data-time-series",
    "title": "4  Aggregating Data",
    "section": "4.3 Data Time Series",
    "text": "4.3 Data Time Series\nA key aspect of data science is visualisation, especially the initial visualisation. Figure 4.1 shows the Conductivity for Rivendell WTW as a times series plot; the graph is also interactive so it can be zoomed to show specific time periods and the mouse can hover on individual points to reveal the date and value.\n\n\nShow the code\n# Make two separate vectors of the date and result (arranged by the date)\ndate_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Sample_Date)\n\nresult_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Result) \n\n# Create a time-series object\ncond_time_series <- xts(x=result_column, order.by=date_column)\n\n\ndygraph(cond_time_series, ylab = \"Conductivity (mS/m)\") %>%\n  dyRangeSelector() %>% \n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Dark2\")) %>% \n  dyHighlight(highlightCircleSize = 5, \n              highlightSeriesBackgroundAlpha = 0.2,\n              hideOnMouseOut = FALSE)\n\n\n\n\n\nFigure 4.1: Interactive Time Series Graph of the Conductivity for Rivendell WTW"
  },
  {
    "objectID": "simplegraphs.html",
    "href": "simplegraphs.html",
    "title": "5  Visualisation",
    "section": "",
    "text": "This chapter illustrates the range of graphs that can help describe the hidden relationships in the drinking water quality data over time."
  },
  {
    "objectID": "simplegraphs.html#ChapSGraphs",
    "href": "simplegraphs.html#ChapSGraphs",
    "title": "5  Visualisation",
    "section": "5.1 Graphs of Time",
    "text": "5.1 Graphs of Time\n\n5.1.1 Scatter Plot: Determinand on a Linear Scale\nAn example determinand time line using a linear scale is shown in Figure 5.1 for temperature at Mirkwood WTW. Temperatures would normally be plotted using a linear scale; other determinands that would generally be plotted on a linear scale are:\n\npH\n\nFree Chlorine\nTotal Chlorine\nColour\n\nConductivity\n\nTurbidity\n\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nmirkwood_temp_data <- wtw_data %>%\n  filter(Description == \"Mirkwood\", Determinand == \"Temperature\")\n\nggplot(mirkwood_temp_data, aes(x = Sample_Date, y = Result)) +\n  geom_point(size = 1, alpha = 0.9, colour = \"steelblue\") +\n  labs(y = \"Temperature (\\u00B0C)\") +\n  scale_x_date(breaks = date_breaks(\"1 year\"), labels = date_format(\"%Y\")) +\n  facet_grid(Description ~ .) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  theme(axis.text.x = element_text(angle = 270, hjust = 1)) +\n  theme(axis.title.x = element_blank(),\n        strip.text = element_text(size=12, colour = \"white\"),\n        strip.background = element_rect(fill = \"black\"))\n\n\n\n\n\nFigure 5.1: Example Time Line Plot on a Linear Scale\n\n\n\n\n\n\n5.1.2 Scatter Plot: Determinand on a Log Scale\nAn example determinand time line using a log scale is shown in Figure 5.2 for Colony Count 21°C at Mirkwood WTW. By convention, and clarity, microbiological determinands are displayed on a log10 scale.\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nmirkwood_CC_data <- wtw_data %>%\n  filter(Description == \"Mirkwood\", Determinand == \"Colony Count 21\")\n\nggplot(mirkwood_CC_data, aes(x = Sample_Date, y = Result)) +\n  geom_point(size = 1, alpha = 0.9, colour = \"yellow4\") +\n  labs(y = \"Colony Count 21\\u00B0C (mL)\") +\n  scale_x_date(breaks = date_breaks(\"1 year\"), labels = date_format(\"%Y\")) +\n  scale_y_log10(\n    breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n    labels = scales::trans_format(\"log10\", scales::math_format(10^.x))\n  ) +\n  facet_grid(Description ~ .) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  theme(axis.text.x = element_text(angle = 270, hjust = 1)) +\n  theme(axis.title.x = element_blank(),\n        strip.text = element_text(size=12, colour = \"white\"),\n        strip.background = element_rect(fill = \"black\")) +\n  annotation_logticks(sides = \"rl\")\n\n\n\n\n\nFigure 5.2: Example Time Line Plot on a Log10 Scale"
  },
  {
    "objectID": "simplegraphs.html#area-graphs",
    "href": "simplegraphs.html#area-graphs",
    "title": "5  Visualisation",
    "section": "5.2 Area Graphs",
    "text": "5.2 Area Graphs\nFigure 5.3 shows an area graph for Chlorine (Free and Combined) at the Mirkwood WTW. The data is plotted with the htmlwidget1 dygraphs2. The wtw_data in the imagic package is filtered for free and total chlorine at the Mirkwood WTW; combined chlorine is then calculated with the formula:\n\\[\nCombined_{Cl} = Total_{Cl} - Free_{Cl}\n\\]\nThe data is then made into a time series object using the xts package before plotting in dygraphs.\n\n\nShow the code\n#http://rstudio.github.io/dygraphs/\n\n\nmirkwood_Chlorine_data <- wtw_data %>%\n  filter(Description == \"Mirkwood\", \n         Determinand == \"Free Chlorine\" | Determinand == \"Total Chlorine\") %>% \n  select(Sample_Date, Determinand, Result) %>% \n  group_by(Sample_Date, Determinand) %>% \n  summarise(chlorine = median(Result, na.rm = T)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = \"Determinand\", values_from = \"chlorine\") %>% \n  mutate(`Combined Chloine` = `Total Chlorine` - `Free Chlorine`)\n\ndate_column <- mirkwood_Chlorine_data %>% \n    select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Sample_Date)\n\nfree_column <- mirkwood_Chlorine_data %>% \n   select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Free) \n\ncombined_column <- mirkwood_Chlorine_data %>% \n   select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Combined) \n\n\n# Create a time-series object\nfree_time_series <- xts(x=free_column, order.by=date_column)\ncomb_time_series <- xts(x=combined_column, order.by=date_column)\n\nchlorine__time_series <- cbind(free_time_series, comb_time_series)\n\ndygraph(chlorine__time_series, main = \"Chlorine\", ylab = \"Cl (mg/l)\") %>%\n  dySeries(\"free_time_series\", label = \"Free\") %>%\n  dySeries(\"comb_time_series\", label = \"Combined\") %>%\n  dyOptions(stackedGraph = TRUE) %>%\n  dyRangeSelector()\n\n\n\n\n\nFigure 5.3: Example Time Line for Combined and Free Chlorine as an Interactive Area Graph"
  },
  {
    "objectID": "simplegraphs.html#box-plots",
    "href": "simplegraphs.html#box-plots",
    "title": "5  Visualisation",
    "section": "5.3 Box Plots",
    "text": "5.3 Box Plots\nBox plots are a useful way of looking at data, as the provide an instant summary; such as 50% of the values are within the box and the line across the box displays the median. Figure 5.4 and fig-boxmonthyear look at the water temperature at Hobbiton WTW.\n\n\nShow the code\n# This helps make the Month factor plot in order\nmonth_levels <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nwtw_data %>% \n  # filter for colour at Hobbiton WTW\n  filter(Determinand == \"Temperature\", Description == \"Hobbiton\") %>% \n  # create month column and make a factor so plot in the right order\n  mutate(Month = lubridate::month(Sample_Date, label = TRUE),\n         Month = factor(Month, levels = month_levels, ordered = TRUE)) %>% \n  ggplot(aes(x= Month, y = Result)) +\n    geom_boxplot(fill = \"steelblue\") +\n  labs(y = \"Water Temerature (\\u00B0C)\") +\n  theme_bw() +\n  theme (legend.position = \"none\",\n         axis.text.x = element_text(),\n         axis.text.y = element_text(),\n         axis.title.y = element_text(),\n         axis.title.x = element_blank(),\n         panel.grid.minor = element_blank(),\n         panel.grid.major.y = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1), \n         panel.grid.minor.y = element_blank(),\n         panel.grid.major.x = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1))\n\n\n\n\n\nFigure 5.4: Boxplot of Monthly Temperature (All Years) for Hobbiton WTW\n\n\n\n\n\n\nShow the code\nwtw_data %>% \n  # create month column and make a factor so plot in the right order\n  mutate(Month = lubridate::month(Sample_Date, label = TRUE),\n         Year = lubridate::year(Sample_Date)) %>% \n  # filter for colour at Hobbiton WTW\n  filter(Determinand == \"Temperature\", \n         Description == \"Hobbiton\",\n         Year < 2005) %>% \n  ggplot(aes(x= Month, y = Result, fill = factor(Year))) +\n    geom_boxplot() +\n  scale_fill_jco() +\n  labs(y = \"Water Temerature (\\u00B0C)\",\n       fill = \"Year\") +\n  theme_bw() +\n  theme (legend.position = \"bottom\",\n         axis.text.x = element_text(),\n         axis.text.y = element_text(),\n         axis.title.y = element_text(),\n         axis.title.x = element_blank(),\n         panel.grid.minor = element_blank(),\n         panel.grid.major.y = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1), \n         panel.grid.minor.y = element_blank(),\n         panel.grid.major.x = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1))\n\n\n\n\n\nFigure 5.5: Boxplot of Monthly Temperature for Each Year at Hobbiton WTW"
  },
  {
    "objectID": "simplegraphs.html#tile-graphs",
    "href": "simplegraphs.html#tile-graphs",
    "title": "5  Visualisation",
    "section": "5.4 Tile Graphs",
    "text": "5.4 Tile Graphs\n\n\nShow the code\nwtw_data %>% \n  # create month column and make a factor so plot in the right order\n  mutate(Month = lubridate::month(Sample_Date, label = TRUE),\n         Year = lubridate::year(Sample_Date),\n         MonthDay = lubridate::mday(Sample_Date)) %>% \n  # filter for colour at Hobbiton WTW\n  filter(Determinand == \"Temperature\", \n         Description == \"Hobbiton\",\n         Year < 2005) %>% \n  ggplot(aes(x = MonthDay, y = Month, fill = Result)) +\n    geom_tile() +\n    scale_x_continuous(breaks=c(1:31), limits=c(0,32)) +\n    scale_fill_distiller(direction = 1, palette = \"BuPu\") +\n    #scale_fill_gradient(low = \"powderblue\", high = \"darkblue\")+\n    labs(x = \"Day of Month\",\n         fill = \"Water \\nTemerature (\\u00B0C)\") +\n  facet_grid(Year~.) +\n  theme (legend.position = \"left\",\n         axis.text.x = element_text(size=8,angle = 270),\n         axis.text.y = element_text(size=10),\n         axis.title.y = element_blank(),\n         axis.title.x = element_text(size=10),\n         panel.grid.minor = element_blank(),\n         panel.grid.major.y = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1), \n         panel.grid.minor.y = element_blank(),\n         panel.grid.major.x = element_line(colour = \"grey80\", linetype = \"solid\", size = 0.1),\n         strip.text = element_text(size=12, colour = \"white\"),\n         strip.background = element_rect(fill = \"black\"))\n\n\n\n\n\nFigure 5.6: Tile Graph of Daily Temperature at Hobbiton WTW"
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "6  Statistical Analysis",
    "section": "",
    "text": "Detecting the signal from the noise"
  },
  {
    "objectID": "reporting.html",
    "href": "reporting.html",
    "title": "7  Reporting",
    "section": "",
    "text": "Automate reports with no copy and paste!"
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Glossary",
    "section": "",
    "text": "A boxplot is a visual method of showing a distribution of values, it is popular among statisticians and is a useful way to explore data. Figure 1 shows the essential outline of the boxplot and the text following explains their relevance:\n\n\nShow the code\nggplot(NileData, aes(x = \"\", y = value)) +\n        geom_boxplot(fill = \"grey85\") +\n        theme(panel.grid.major = element_blank(),\n              panel.grid.minor = element_blank(),\n              axis.title.x = element_blank(),\n              panel.background = element_blank(),\n              axis.title.y = element_blank(),\n              axis.text.x = element_blank(),\n              axis.text.y = element_blank(),\n              axis.ticks = element_blank(),\n              panel.border = element_rect(colour = \"black\", fill=NA, size=2))\n\n\n\n\n\nFigure 1: Example boxplot with whiskers and outlier\n\n\n\n\nEach boxplot consists of a box that stretches from the 25th percentile (\\(Q_1\\)) of the distribution to the 75th percentile (\\(Q_3\\)), a distance known as the interquartile range (\\(IQR\\)). In the middle of the box is a line that displays the median, i.e. 50th percentile, of the distribution. These three lines give you a sense of the spread of the distribution and whether or not the distribution is symmetric about the median or skewed to one side. The dots at the end of the boxplot represent outliers There are a number of different rules for determining if a point is an outlier, but the method that R (R Core Team 2022) and ggplot (Wickham et al. 2022) use is the 1.5 rule.\nIf a data point is:\n\nless than \\(Q_1 - 1.5 * IQR\\)\n\ngreater than \\(Q_3+ 1.5 * IQR\\)\n\nthen that point is classed as an outlier. IQR is Inter Quartile Range\nThe whiskers are defined as:\n\nupper whisker = \\(min(max(x), Q_3 + 1.5 * IQR)\\)\nlower whisker = \\(max(min(x), Q_1 - 1.5 * IQR)\\)\n\nwhere \\(IQR = Q_3 - Q_1\\), the box length. So the upper whisker is located at the smaller of the maximum x value and \\(Q_3 + 1.5 * IQR\\), whereas the lower whisker is located at the larger of the smallest x value and \\(Q_1 - 1.5 * IQR\\).\nAdditional information about boxplots can be found https://en.wikipedia.org/wiki/Box_plot\n\n\n\n\nR Core Team. 2022. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "R Core Team. 2022. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey\nDunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using\nthe Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2."
  }
]
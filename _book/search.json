[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Magic",
    "section": "",
    "text": "This web book is an update to the WRC Research Project Number K5/2730//3. Since the this project was completed much has happened in Data Science…\nWhy South Africa needs Data Science\nWater Utilities are known for being data rich organisations. Water Utilities collect raw water and process (treatment) data, chemical dosage rate data and flow records, operational monitoring data, treatment plant data, compliance data for final water reservoirs and distribution systems, water quality at the final contact tank, distribution reservoirs, network and consumer complaint information. Many of the larger water utilities have online instrumentation such as Supervisory Control and Data Acquisition (SCADA) which collects information on flow and quality parameters which is used by the process control staff for operational purposes and quality assurance and control."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "The approach (methodology and practice) to data science has been changed dramatically in recent years with the continuing development of open source software"
  },
  {
    "objectID": "intro.html#install-r-rstudio-and-packages",
    "href": "intro.html#install-r-rstudio-and-packages",
    "title": "1  Introduction",
    "section": "1.1 Install R, RStudio and Packages",
    "text": "1.1 Install R, RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\n1.1.1 Install the imagic Package from GitHub\nThe imagic package contains example data (e.g. wtw_data) and functions that help with the Data Science of water treatment works monitoring results. To install this package use the code below in the console (see Figure ); one line at a time. The package is installed from GitHub.\n\n\nShow the code\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/imagic\")"
  },
  {
    "objectID": "intro.html#data-science",
    "href": "intro.html#data-science",
    "title": "1  Introduction",
    "section": "1.2 Data Science",
    "text": "1.2 Data Science\n\n\n\nFigure 1.1: Data Science Overview"
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "2  Databases",
    "section": "",
    "text": "Table 2.1 shows the structure of the wtw_data in the imagic package. The data has 494,199 rows.\n\n\nShow the code\nwtw_data %>% \n  sample_n(10) %>% \n  knitr::kable()\n\n\n\n\nTable 2.1: Data From wtw_data in the imagic Package\n\n\n\n\n\n\n\n\n\n\n\nDescription\nSample_Date\nDeterminand\nResult\nUnits\nlessthan\ngreaterthan\n\n\n\n\nIsengard WTW\n2012-02-20\nColony Count 37\n0.0\nmL\nFALSE\nFALSE\n\n\nMirkwood WTW\n2014-07-05\nE.coli\n0.0\nMPN/100mL\nFALSE\nFALSE\n\n\nMinas Tirith WTW\n2001-12-27\nTemperature\n23.2\n°C\nFALSE\nFALSE\n\n\nGrey Havens WTW\n2001-05-24\nColiforms\n0.0\nMPN/100mL\nFALSE\nFALSE\n\n\nEdoras WTW\n2001-02-08\nE.coli\n0.0\nMPN/100mL\nFALSE\nFALSE\n\n\nMinas Tirith WTW\n2000-11-24\nColony Count 21\n5.0\nmL\nFALSE\nFALSE\n\n\nGrey Havens WTW\n2003-03-23\nTemperature\n22.5\n°C\nFALSE\nFALSE\n\n\nIsengard WTW\n2014-01-13\nE.coli\n0.0\nMPN/100mL\nFALSE\nFALSE\n\n\nHobbiton WTW\n2003-05-22\nTotal Chlorine\n1.3\nmg Cl2/L\nFALSE\nFALSE\n\n\nDale WTW\n2000-03-02\nColony Count 21\n0.0\nmL\nFALSE\nFALSE"
  },
  {
    "objectID": "transformation.html",
    "href": "transformation.html",
    "title": "3  Transformation",
    "section": "",
    "text": "In this Chapter we describe, and show the code, on how to transform data into a usable selection; a sub-set of information from the database that can be used to create:\n_this is can be considered as part of transform shown in Figure 1.1.\nThe sub-set of information, the selection of data, is created by:"
  },
  {
    "objectID": "transformation.html#filtering-data",
    "href": "transformation.html#filtering-data",
    "title": "3  Transformation",
    "section": "3.1 Filtering Data",
    "text": "3.1 Filtering Data\nThe water quality database, wtw_data in the imagic package, contain measurements:\n\nat various Water Treatment Works (WTW)\n\nfor a range of determinands\n\nover periods of time\n\nTo create summary statistics and visualisation for individual (or groups of) determinands and select periods of time we filter the database so only the required information is left.\nThe Dynamic Table below shows the wtw_data filtered for the Conductivity determinand at the Rivendell WTW water treatment works.\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nriven_cond_data <- wtw_data %>% \n  filter(Description == \"Rivendell WTW\", Determinand == \"Conductivity\") \n\n# show the data with datatable function from the DT package\nDT::datatable(riven_cond_data, options = list(pageLength = 5), caption = 'Conductivity at Rivendell WTW')\n\n\n\n\n\n\n\nIn the filtered data riven_cond_data we can see that there are now 6,245 observations from a total of 494,199 in the original database wtw_data. All the riven_cond_data is shown in the dynamic Table below."
  },
  {
    "objectID": "transformation.html#summary-statistics",
    "href": "transformation.html#summary-statistics",
    "title": "3  Transformation",
    "section": "3.2 Summary Statistics",
    "text": "3.2 Summary Statistics\nThe list of data in the Table above is not very informative (if only because it is difficult to see all the data at one time); to gain a better understanding of the Conductivity data, summary statistics can be produced. The code below uses the mosaic package to calculate some favourite stats using the function favstats; the summary statistics for the Conductivity for Rivendell WTW is shown in Table 3.1.\n\n\nShow the code\n# The summary statistics are saved into a variable riven_cond_stats \nriven_cond_stats <- favstats(~Result, data = riven_cond_data)\n\n# riven_cond_stats is made into a the table (using the code below)\nriven_cond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 3.1:  Summary Statistcs for Conductivity at Rivendell WTW \n  \n  \n    \n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    1.44\n11.45\n13.64\n16.03\n41\n14.08085\n3.262842\n6245\n0"
  },
  {
    "objectID": "transformation.html#data-time-series",
    "href": "transformation.html#data-time-series",
    "title": "3  Transformation",
    "section": "3.3 Data Time Series",
    "text": "3.3 Data Time Series\nA key aspect of data science is visualisation, especially the initial visualisation. Figure 3.1 shows the Conductivity for Rivendell WTW as a times series plot; the graph is also interactive so it can be zoomed to show specific time periods and the mouse can hover on individual points to reveal the date and value.\n\n\nShow the code\n# Make two separate vectors of the date and result (arranged by the date)\ndate_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Sample_Date)\n\nresult_column <- riven_cond_data %>% \n    select(Sample_Date, Result) %>% \n    arrange(Sample_Date) %>% \n    pull(Result) \n\n# Create a time-series object\ncond_time_series <- xts(x=result_column, order.by=date_column)\n\n\ndygraph(cond_time_series, ylab = \"Conductivity (mS/m)\") %>%\n  dyRangeSelector() %>% \n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Dark2\")) %>% \n  dyHighlight(highlightCircleSize = 5, \n              highlightSeriesBackgroundAlpha = 0.2,\n              hideOnMouseOut = FALSE)\n\n\n\n\n\nFigure 3.1: Interactive Time Series Graph of the Conductivity for Rivendell WTW"
  },
  {
    "objectID": "simplegraphs.html",
    "href": "simplegraphs.html",
    "title": "4  Timeline Graphs",
    "section": "",
    "text": "This chapter illustrates the range of graphs that can help describe the hidden relationships in the drinking water quality data over time."
  },
  {
    "objectID": "simplegraphs.html#plots-of-determinands-against-time",
    "href": "simplegraphs.html#plots-of-determinands-against-time",
    "title": "4  Timeline Graphs",
    "section": "4.1 Plots of Determinands against Time",
    "text": "4.1 Plots of Determinands against Time\n\n4.1.1 Determinand on a Linear Scale\nAn example determinand time line using a linear scale is shown in Figure 4.1 for temperature at Mirkwood WTW. Temperatures would normally be plotted using a linear scale; other determinands that would generally be plotted on a linear scale are:\n\npH\n\nFree Chlorine\nTotal Chlorine\nColour\n\nConductivity\n\nTurbidity\n\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nmirkwood_temp_data <- wtw_data %>%\n  filter(Description == \"Mirkwood WTW\", Determinand == \"Temperature\")\n\nggplot(mirkwood_temp_data, aes(x = Sample_Date, y = Result)) +\n  geom_point(size = 1, alpha = 0.9, colour = \"steelblue\") +\n  labs(y = \"Temperature (\\u00B0C)\") +\n  scale_x_date(breaks = date_breaks(\"1 year\"), labels = date_format(\"%Y\")) +\n  facet_grid(Description ~ .) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  theme(axis.text.x = element_text(angle = 270, hjust = 1)) +\n  theme(axis.title.x = element_blank())\n\n\n\n\n\nFigure 4.1: Example Time Line Plot on a Linear Scale\n\n\n\n\n\n\n4.1.2 Determinand on a Log Scale\nAn example determinand time line using a log scale is shown in Figure 4.2 for Colony Count 21°C at Mirkwood WTW. By convention, and clarity, microbiological determinands are displayed on a log10 scale.\n\n\nShow the code\n# filter the wtw_data with the filter function and the dplyr package\nmirkwood_CC_data <- wtw_data %>%\n  filter(Description == \"Mirkwood WTW\", Determinand == \"Colony Count 21\")\n\nggplot(mirkwood_CC_data, aes(x = Sample_Date, y = Result)) +\n  geom_point(size = 1, alpha = 0.9, colour = \"yellow4\") +\n  labs(y = \"Colony Count 21\\u00B0C (mL)\") +\n  scale_x_date(breaks = date_breaks(\"1 year\"), labels = date_format(\"%Y\")) +\n  scale_y_log10(\n    breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n    labels = scales::trans_format(\"log10\", scales::math_format(10^.x))\n  ) +\n  facet_grid(Description ~ .) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  theme(axis.text.x = element_text(angle = 270, hjust = 1)) +\n  theme(axis.title.x = element_blank()) +\n  annotation_logticks(sides = \"rl\")\n\n\n\n\n\nFigure 4.2: Example Time Line Plot on a Log10 Scale\n\n\n\n\n\n\n4.1.3 Area Graphs\nFigure 4.3 shows an area graph for Chlorine (Free and Combined) at the Mirkwood WTW. The data is plotted with the htmlwidget1 dygraphs2. The wtw_data in the imagic package is filtered for free and total chlorine at the Mirkwood WTW; combined chlorine is then calculated with the formula:\n\\[\nCombined_{Cl} = Total_{Cl} - Free_{Cl}\n\\]\nThe data is then made into a time series object using the xts package before plotting in dygraphs.\n\n\nShow the code\n#http://rstudio.github.io/dygraphs/\n\n\nmirkwood_Chlorine_data <- wtw_data %>%\n  filter(Description == \"Mirkwood WTW\", \n         Determinand == \"Free Chlorine\" | Determinand == \"Total Chlorine\") %>% \n  select(Sample_Date, Determinand, Result) %>% \n  group_by(Sample_Date, Determinand) %>% \n  summarise(chlorine = median(Result, na.rm = T)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = \"Determinand\", values_from = \"chlorine\") %>% \n  mutate(`Combined Chloine` = `Total Chlorine` - `Free Chlorine`)\n\ndate_column <- mirkwood_Chlorine_data %>% \n    select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Sample_Date)\n\nfree_column <- mirkwood_Chlorine_data %>% \n   select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Free) \n\ncombined_column <- mirkwood_Chlorine_data %>% \n   select(Sample_Date, Free = `Free Chlorine`, Combined = `Combined Chloine`) %>% \n    arrange(Sample_Date) %>% \n    pull(Combined) \n\n\n# Create a time-series object\nfree_time_series <- xts(x=free_column, order.by=date_column)\ncomb_time_series <- xts(x=combined_column, order.by=date_column)\n\nchlorine__time_series <- cbind(free_time_series, comb_time_series)\n\ndygraph(chlorine__time_series, main = \"Chlorine\", ylab = \"Cl (mg/l)\") %>%\n  dySeries(\"free_time_series\", label = \"Free\") %>%\n  dySeries(\"comb_time_series\", label = \"Combined\") %>%\n  dyOptions(stackedGraph = TRUE) %>%\n  dyRangeSelector()\n\n\n\n\n\nFigure 4.3: Example Time Line for Combined and Free Chlorine as an Interactive Area Graph"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "Show the code\n1 + 1\n\n\n[1] 2"
  }
]